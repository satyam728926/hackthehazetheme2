{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satyam pandey\\\\Desktop\\\\MyProjects\\\\hackthon\\\\image\\\\client\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport UrlInputForm from '../Components/UrlInputForm';\nimport ImageGrid from '../Components/ImageGrid';\nimport Loader from '../Components/Loader';\nimport { scrapeImages } from '../utils/api';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const handleScrape = async urls => {\n    setLoading(true);\n    setImages([]);\n    setError('');\n    try {\n      const data = await scrapeImages(urls);\n      setImages(data.images || []);\n    } catch (err) {\n      setError('‚ùå Failed to fetch images. Make sure the URLs are correct and the server is running.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scraper-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"scraper-title\",\n        children: \"\\uD83D\\uDDBC\\uFE0F Image Scraper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UrlInputForm, {\n        onSubmit: handleScrape\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-results-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"results-title\",\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), !loading && images.length === 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center no-images-text\",\n        children: \"No images to display. Try entering a valid URL above.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), !loading && images.length > 0 && /*#__PURE__*/_jsxDEV(ImageGrid, {\n        images: images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"k+SD7uqByhDMYk/lggb6T2AIsvw=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","UrlInputForm","ImageGrid","Loader","scrapeImages","jsxDEV","_jsxDEV","Home","_s","images","setImages","loading","setLoading","error","setError","handleScrape","urls","data","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","length","_c","$RefreshReg$"],"sources":["C:/Users/satyam pandey/Desktop/MyProjects/hackthon/image/client/src/pages/Home.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport UrlInputForm from '../Components/UrlInputForm';\r\nimport ImageGrid from '../Components/ImageGrid';\r\nimport Loader from '../Components/Loader';\r\nimport { scrapeImages } from '../utils/api';\r\nimport '../App.css';\r\n\r\nexport default function Home() {\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleScrape = async (urls) => {\r\n    setLoading(true);\r\n    setImages([]);\r\n    setError('');\r\n\r\n    try {\r\n      const data = await scrapeImages(urls);\r\n      setImages(data.images || []);\r\n    } catch (err) {\r\n      setError('‚ùå Failed to fetch images. Make sure the URLs are correct and the server is running.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      {/* Scraper Input Box */}\r\n      <div className=\"scraper-box\">\r\n        <h1 className=\"scraper-title\">üñºÔ∏è Image Scraper</h1>\r\n        <UrlInputForm onSubmit={handleScrape} />\r\n        {error && <p className=\"error-text\">{error}</p>}\r\n      </div>\r\n\r\n      {/* Image Results Section */}\r\n      <div className=\"image-results-box\">\r\n        <h2 className=\"results-title\">Results</h2>\r\n\r\n        {/* Loading Spinner */}\r\n        {loading && <Loader />}\r\n\r\n        {/* Empty state when no images and no error and not loading */}\r\n        {!loading && images.length === 0 && !error && (\r\n          <p className=\"text-center no-images-text\">No images to display. Try entering a valid URL above.</p>\r\n        )}\r\n\r\n        {/* Image Grid */}\r\n        {!loading && images.length > 0 && <ImageGrid images={images} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}